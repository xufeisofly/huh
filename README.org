** API

   #+BEGIN_SRC go
   huh.Config("mysql", huh.DBConfig{
       Master: "master:pwd@localhost/mysite?charset=utf8&parseTime=True&loc=local",
	   Slaves: []string{
	       "slave1:pwd@localhost/mysite?charset=utf8&parseTime=True&loc=local",
	   },
   })

   user := User{ID: 1, Name: "Trump"}
   ctx := context.TODO()

   
   o = huh.New()

   // Create
   o.Create().Do(ctx, &user)
   o.MustCreate().Do(ctx, &user)

   // Save
   user.Name = "Obama"
   o.Save().Do(ctx, &user)

   // Update with validation and callbacks
   o.Update("ID", 2, "Name", "Obama").Do(ctx, &user)
   o.Update(map[string]interface{}{"ID": 2, "Name": "Obama"}).Do(ctx, &user)
   o.Where("ID < ?", 3).Update("name", "Obama").Do(ctx, User{})
   o.MustUpdate(ctx, &user, "ID", 2, "Name": "Obama")

   // no validation, no callbacks
   o.Update("ID", 2, "Name": "Obama").WithoutCallBacks().Do(ctx, &user)
   o.Update("ID", 2, "Name": "Obama").Do(ctx, User{})

   // Delete
   o.Destroy().Do(ctx, &user)
   o.MustDestroy().Do(ctx, &user)
   o.Destroy().Do(ctx, User{})
   o.Where("Name = ", "Trump").Destroy().Do(ctx, User{})

   // Query
   o.Get(1).Do(ctx, &user)
   o.GetBy("Name", "Trump", "ID", 1).Do(ctx, &user)

   users := []User{}
   o.Where("Name = ?", "Trump").Do(ctx, &users)
   o.Where("Name = ?", "Trump").Offset(0).Limit(10).Do(ctx, &users)
   o.Where("Name = ?", "Trump").Order("id desc").Do(ctx, &users)

   o.Select('name').Get(1).Do(ctx, &user)

   // Callbacks
   func (u *User) BeforeCreate(ctx) error {
       return nil
   }

   // Raw SQL
   fmt.Println(o.Create().Of(ctx, &user))
   # => "INSERT INTO users (`users.id`,`users.email`) VALUES (1,'test@huh.com')"

   // transaction
   o.Transaction(ctx, func(o *huh.Orm){
       o.MustCreate().Do(ctx, &user2)
       o.MustCreate().Do(ctx, &user)
   })

   o.Transaction(ctx, func(o2 *huh.Orm){
       o2.MustCreate().Do(ctx, &user)

	   o2.Transaction(ctx, func(o3 *huh.Orm){
	       o3.MustCreate().Do(ctx, &user2)
	   })
   })
   
   #+END_SRC

** TODOs

**** DONE create
**** DONE create callback
**** DONE update updatewithwhere
**** DONE get getby
**** DONE get should match col name order, not select *
**** DONE offset limit order
**** DONE created_at updated_at
**** TODO embeded transaction
**** DONE destroy
**** DONE transaction
**** TODO count
**** TODO group by
**** TODO master and slave DB
**** TODO stability in various conditions
**** TODO code enhancement
**** TODO annotation
**** TODO syncMutex
**** TODO errors standard
